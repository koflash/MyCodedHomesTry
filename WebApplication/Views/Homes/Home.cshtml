@model WebApplication.ViewModels.HomeViewModel

@section styles{
    <style>
        #success-msg-container,
        #fail-msg-container,
        #delete-msg-container,
        #img-fail-msg-container {
            display: none;
        }
    </style>

}

@section scripts{
    <script>

        $(function () {

            showOfflineLayout = function () {
                $('#offline-modal').modal();
                $('#offline-alert-container').show();
            },

            showOnlineLayout = function () {
                var e = $('#offline-alert-container');
                if (e.is(':visible')) {
                    e.fadeOut('fast');
                }
            };
            var offlineUtility =
                new offlineUtility(showOnlineLayout, showOfflineLayout);

            var
                homeDataForm = $("#home-data-form")[0],
                progressBar = $('#progress-bar');

            var Home = function () {
                this.id = ko.observable("@Model.Home.Id");
                this.streetAddress = ko.observable("@Model.Home.StreetAddress");
                this.streetAddress2 = ko.observable("@Model.Home.StreetAddress2");
                this.city = ko.observable("@Model.Home.City");
                this.zipCode = ko.observable("@((Model.Home.ZipCode > 0) ? Model.Home.ZipCode.ToString() : "")");
                this.bedrooms = ko.observable("@Model.Home.Bedrooms");
                this.bathrooms = ko.observable("@Model.Home.Bathrooms");
                this.squareFeet = ko.observable("@Model.Home.SquareFeet");
                this.price = ko.observable("@Model.Home.Price");
                this.description = ko.observable("@Model.Home.Description");
                this.imageName = ko.observable("@Model.Home.ImageName");
                this.imageUrl = ko.computed({
                    read: function () {
                        var
                            fileName = (this.imageName() === '') ?
                            'no-image-large.png' : this.imageName(),
                            url = '@Model.ImageUrlPrefix' + fileName;

                        return url;
                    },
                    write: function (value) {
                        var parts = value.split('/');
                        this.imageName(parts[parts.length - 1])
                    },
                    owner: this
                });
            };

            var ViewModel = function (home) {
                this.model = home;

                this.errorMessage = ko.observable();

                this.goToOfflinePage = function () {
                    window.location = '/homes/offline';
                };

                this.hasOfflineHomesToSaveToServer = ko.computed(function () {
                    if (Modernizr.localstorage) {
                        var
                            ls = window.localStorage.
                                getItem('codedhomes-new-homes'),

                            result = (ls !== null &&
                                        ls !== undefined &&
                                        ls !== 'undefined' &&
                                        ls !== '[]');

                        return result;
                    }
                    return false;
                });

                this.hideProgressBar = function (showAfterHideFunc) {

                };

                this.showError = function (error) {

                };

                this.showImageUpload = function () {

                };

                this.hideImageUpload = function () {

                };

                this.showImageError = function () {

                };

                this.showSuccess = function () {

                };

                this.showDelete = function () {

                };

                this.uploadImage = function () {
                    if (window.FormData !== undefined) {
                        var
                            data = new FormData(),
                            file = $('#image-upload')[0].files[0];

                        data.append('image', file);
                        data.append('id', vm.model.id());

                        return homesDataService.saveImage(data); // look for the saveimage in app/home...
                    }
                };

                this.hasImageToUpload = function () {
                    return $('#image-upload')[0].files.length > 0;
                };

                this.save = function () {
                    vm.hideImageUpload();

                    var validationUtility = new validationUtility();

                    if (validationUtility.validate('home-data-form')) {
                        $('#command-buttons').hide();
                        $('#progress-bar').fadeIn();

                        var home = ko.toJS(this.model);

                        homesDataService.save(home).done(function (response) {
                            if (response.id) {
                                vm.model.id(response.id);
                            }

                            if (vm.hasImageToUpload()) {
                                vm.uploadImage().done(function (result) {

                                    if (result.status === 'error') {
                                        vm.showImageError(result);
                                    }
                                    else {
                                        vm.model.imageUrl(result.imageUrl);
                                        vm.showSuccess();
                                    }

                                }).fail(function (error) {
                                    vm.showImageError();
                                });
                            } else {
                                vm.showSuccess();
                            }
                        }).fail(function (error) {
                            vm.showError(error);
                        });
                    }
                };

                this.requestDelConfirm = function () {
                    $('#del-confirm').modal();
                };

                this.del = function () {
                    var home = ko.toJS(this.model);
                    homesDataService.del(home).done(function (response) {
                        vm.showDelete();
                    }).fail(function (error) {
                        vm.showError(error);
                    }).always(function () {
                        $('#del-confirm').modal('hide');
                    });
                };

            };


            var vm = new ViewModel(new Home());
            ko.applyBindings(vm);

            H5F.setup([homeDataForm], {
                validClass: "valid",
                invalidClass: "invalid",
                requiredClass: "required"
            });
        });

    </script> 
    }


<div class="alert alert-info"
     data-bind="visible: hasOfflineHomesToSaveToServer">
    @Html.ActionLink("Please save to the server the homes you added while offline.",
        "reviewoffline", "homes")
</div>



<div class="row">
    <div class="span5 mobile-push-down">
        <div class="row">
            <div class="span10">
                <div>
                    <img data-bind="attr: {src: model.imageUrl}"
                         class="fancy" />
                </div>
                <button id="upload-button" data-bind="click: showImageUpload"
                        class="btn btn-mini push-down">
                    <i class="icon-upload"></i> Upload Image
                </button>
                <div id="upload-form-container"
                     class="none alert alert-success push-down">
                    <form id="upload-form" action="/homes/uploadimage"
                          method="POST" enctype="multipart/form-data">
                        <button class="btn btn-mini pull-right"
                                data-bind="click: hideImageUpload">
                            x
                        </button>
                        <input id="image-upload" type="file" name="image" />
                    </form>
                </div>
            </div>
        </div>
        <div id="img-fail-msg-container"
             class="alert alert-error alert-block push-down">
            <button type="button" class="close" data-dismiss="alert">x</button>
            <h4>Error</h4>
            <p>
                Oops, something bad happened!
                This is what the server has to say about it:
            </p>
            <p data-bind="text: errorMessage"></p>

        </div>
        <form id="home-data-form">
            <div class="span5 mobile-push-right">
                <div class="row">
                    <div class="span11">
                        <input id="streetAddress" name="streetAddress"
                               data-bind="value: model.streetAddress"
                               type="text" class="glyphicon-fullscreen" autofocus
                               data-role="validate"
                               title="Street Address"
                               data-content="The Street Address is Required."
                               placeholder="street address" required />
                        <br />
                        <input id="streetAddress2" name="city"
                               data-bind="value: model.streetAddress2"
                               placeholder="suite, apt. #, etc" />
                        <br />

                        <input id="city" name="city" data-bind="value: model.city"
                               title="City"
                               data-role="validate"
                               data-content="City is required."
                               type="text" class="small"
                               placeholder="city" required /> CA

                        <input id="zipCode" name="zipCode"
                               data-bind="value: model.zipCode"
                               title="Zip Code"
                               data-role="validate"
                               data-content="Zip Code is required."
                               type="number" class="no-spin small push-right"
                               placeholder="zip code" required />

                    </div>
                </div>

                <hr />

                <div class="row stats">
                    <div class="span3"><label for="bedrooms">Price</label></div>
                    <div class="span6">
                        <input data-bind="value: model.price"
                               title="Price"
                               data-role="validate"
                               data-content="Price is required."
                               id="price" name="price"
                               type="number" class="no-spin small" required />
                    </div>
                </div>

                <div class="row stats">
                    <div class="span3"><label for="bedrooms">Bedrooms</label></div>
                    <div class="span6">
                        <input data-bind="value: model.bedrooms"
                               id="bedrooms" name="bedrooms"
                               data-role="validate"
                               data-content="The number of bedrooms is required."
                               type="number" class="no-spin small" required />
                    </div>
                </div>

                <div class="row stats">
                    <div class="span3"><label for="bathrooms">Bathrooms</label></div>
                    <div class="span6">
                        <input data-bind="value: model.bathrooms"
                               id="bathrooms" name="bathrooms"
                               data-role="validate"
                               data-content="The number of bathrooms is required."
                               type="number" class="no-spin small" required />
                    </div>
                </div>

                <div class="row stats">
                    <div class="span3"><label for="square-feet">Square Feet</label></div>
                    <div class="span6">
                        <input data-bind="value: model.square-feet"
                               id="bedrooms" name="square-feet"
                               data-role="validate"
                               data-content="The square-feet of the home is required."
                               type="number" class="no-spin small" required />
                    </div>
                    <hr />

                    <div class="row">
                        <div class="span11">
                            <label for="description">Description</label>
                            <textarea data-bind="value: model.description"
                                      id="description" name="description"
                                      class="full" required
                                      title="Description"
                                      data-role="validate"
                                      data-content="A description id required."></textarea>
                        </div>
                    </div>


                    <hr />

                    @if (Model.CanEdit)
                    {
                        <div class="row">
                            <div class="span11">
                                <div id="progress-bar"
                                     class="progress progress-striped active fade-anim none">
                                    <div class="bar" style="width: 100%;"></div>
                                </div>
                                <div id="command-buttons" class="pull-right">
                                    @if (Model.CanDelete && !Model.IsNew)
                                    {
                                        <a href="#" id="delete-link" class="cmd"
                                           data-bind="click: requestDelConfirm"
                                           tabindex="-1">Delete</a>
                                    }
                                    <button data-bind="click: save" type="button"
                                            class="btn btn-primary btn-lg push-right cmd">
                                        Save
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    <!--Message Containers-->
                    <div class="row">
                        <div id="success-msg-container"
                             class="span11 alert alert-success alert-block push-down">
                            <button type="button"
                                    class="close" data-dismiss="alert">
                                x
                            </button>
                            <h4>Changes Saved</h4>
                            <p>
                                The home information is saved.
                                You can @Html.ActionLink("add another home", "new", "homes") or
                                @Html.ActionLink("return to the homes list", "index", "homes") if you wish.
                            </p>
                        </div>

                    </div>

                    <div id="fail-msg-container"
                         class="span11 alert alert-error alert-block push-down">
                        <button type="button" class="close"
                                data-dismiss="alert">
                            x
                        </button>
                        <h4>Error</h4>
                        <p>
                            Oops, something bad happened!
                            This is what the server has to say about it:
                        </p>
                        <p data-bind="text: errorMessage"></p>
                    </div>

                </div>

                <div class="row">
                    <div id="delete-msg-container"
                         class="span11 alert alert-block push-down">
                        <button type="button"
                                class="close" data-dismiss="alert">
                            x
                        </button>
                        <h4>Home Deleted</h4>
                        <p> The home is now removed from the system.</p>
                        <p>You can return to the 
                            @Html.ActionLink("full homes list", "Index", "Homes")
                            or @Html.ActionLink("add a new home", "new", "Homes").
                        </p>
                    </div>
                </div>

                <!-- /Message Container-->

            </div>
        </form>
    </div>


</div>
 
<div id="del-confirm" class="modal hide fade" tabindex="-1" role="dialog"
     aria-labelledby="del-confirm-label" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close"
                data-dismiss="modal" aria-hidden="true">x</button>
        <h3 id="del-confirm-label">Confirm Delete</h3>
    </div>
    <div class="modal-body">
        <p>Are you sure you want to delete this home?</p>
        <p class="alert alert-error push-down"><strong>Note:</strong>
            There is no undo for this action.</p>
    </div>
    <div class="modal-footer">
        <button class="btn"
                data-dismiss="modal" aria-hidden="true">Close</button>

        <button class="btn btn-primary"
                data-bind="click: del">Delete Home</button>
    </div>
</div>


<div id="offline-modal" class="modal hide fade" tabindex="-1" role="dialog"
     aria-labelledby="offline-modal-label" aria-hidden="true">
    <div class="modal-header">
        <button type="button" class="close"
                data-dismiss="modal" aria-hidden="true">x</button>
        <h3 id="del-confirm-label">You Are Offline</h3>
    </div>
    <div class="modal-body">
        <p>
            Your connection to the internet has been interrupted for some reason.
            Any information you try to save here will not be saved into the system.
        </p>
        <p>If you are adding a new home you can continue by using the
        offline page.</p>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal"
                aria-hidden="true">Close</button>
        <button class="btn btn-primary"
                data-bind="click: goToOfflinePage">Go to Offline Page</button>
    </div>
</div>

@section breakout{
    <div id="offline-alert-container"
         class="alert alert-error alert-small none sticky-message">
        This page won't work correctly until you have access to a reliable internet connection.
        <a href="/homes/offline">You can use the offline page to 
        continue adding new homes.</a>
    </div>
    }
